<!--
   A simple example of a route using Apache Camel and the Spring DSL. It has a restlet endpoint that asks for
   the price of a stock code -->

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:camel="http://camel.apache.org/schema/spring" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

    <!-- a bean that represents an exception. used by the route example -->
    <bean id="error" class="java.lang.IllegalArgumentException">
        <constructor-arg index="0" value="Google API error"/>
    </bean>

    <!-- to be included, route contexts must start with com.backbase.portal.integration.service -->
    <camel:routeContext id="com.backbase.portal.integration.service.stock"
        xmlns="http://camel.apache.org/schema/spring">

        <!-- the stock query route -->
        <route id="com.backbase.training.stock" streamCache="true">

            <from uri="restlet:/stock/{code}/price?restletBinding=#queryStringToHeadersRestletBinding" />


            <!-- restlet and http components used in this route share the same header name.
                 To avoid invalid states we remove these headers generated by restlet before calling the http one -->
            <removeHeaders pattern="CamelHttp*" excludePattern="CamelHttpMethod"/>

            <!-- a simple logging message -->
            <log message="${headers}" loggingLevel="DEBUG"/>

            <!-- an example of content-based routing: depending on the stock code, the result will be different -->
            <choice id="codeChoice">
                <!-- fixed price for the NASDAQ code (just to give an example of content-based routing -->
                <when>
                    <simple>${in.header.code} == "NASDAQ"</simple>
                    <setHeader headerName="price">
                        <constant>40.00</constant>
                    </setHeader>
                </when>
                <!-- fixed price for the DOWJONES code (just to give an example of content-based routing -->
                <when>
                    <simple>${in.header.code} == "DOWJONES"</simple>
                    <setHeader headerName="price">
                        <constant>30.00</constant>
                    </setHeader>
                </when>
                <otherwise>
                    <!-- note that query parameters passed to an HTTP endpoint must be informed
                         into the CamelHttpQuery header, instead of passing them in the URL.
                         If you pass them in the URL, the component will interpret as a component
                         modifier -->
                    <setHeader headerName="CamelHttpQuery">
                        <simple>q=${in.header.code}</simple>
                    </setHeader>

                    <!-- Getting the stock price using google finance. Note that we are using
                         an option for the HTTP component (throwExceptionOnFailure=false) to
                         check if a stock code does not exist.
                         This option prevents camel for generating an exception for response codes
                         different from 200. -->

                    <to uri="https://www.google.com/finance/info?throwExceptionOnFailure=false"/>

                    <choice>
                        <!-- for successful responses, we get the price -->
                        <when>
                            <simple>${header.CamelHttpResponseCode} == 200</simple>
                            <convertBodyTo type="String"/>

                            <!-- an interesting situation: the google finance API sends a proper json file, but at the beginning it
                                 sends a comment symbol // that can cause parsing problems. Thus, we remove it using the
                                 replaceAll method -->
                            <transform>
                                <simple>${body.replaceAll("//", "")}</simple>
                            </transform>

                            <!-- converting the json answer into a java object -->
                            <unmarshal>
                                <json library="Jackson" unmarshalTypeName="java.util.List"/>
                            </unmarshal>

                            <log message="body: ${body}" loggingLevel="DEBUG"/>


                            <!-- getting the price from the java object. Note that the json response from google is
                                 an array. This is because the rest api allows getting more than one stock codes. Since
                                 we are getting only one price, we are interested in the first position. Moreover, the json
                                 library will turn json properties and values into a java Map. That's why we use "l_fix"
                                 as a key to get the price. "l_fix" is the property that stores the stock price -->
                            <setHeader headerName="price">
                                <simple>${body.get(0)[l_fix]}</simple>
                            </setHeader>
                        </when>
                        <!-- for 400 errors we assign null to the price so that is easy to handle in the client side -->
                        <when>
                            <simple>${header.CamelHttpResponseCode} == 400</simple>
                            <setHeader headerName="CamelHttpResponseCode">
                                <constant>200</constant>
                            </setHeader>
                            <setHeader headerName="price">
                                <constant>null</constant>
                            </setHeader>
                        </when>
                        <!-- any other return code from google will generate a runtime exception -->
                        <otherwise>
                            <throwException ref="error"/>
                        </otherwise>
                    </choice>

                </otherwise>

            </choice>

            <!-- creating a response to the caller using the obtained values -->
            <setBody>
                <simple>{"code" : "${header.code}", "country": "${header.country}", "price" : ${header.price}}</simple>
            </setBody>

            <log id="com.backbase.training.content.log.body" message="body: ${body}" loggingLevel="DEBUG"/>
        </route>
    </camel:routeContext>
</beans>
